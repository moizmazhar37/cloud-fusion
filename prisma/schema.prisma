// prisma/schema.prisma
datasource db {
  provider  = "mongodb"
  url       = "mongodb+srv://salissalman:Salis2002@cluster0.9oja93h.mongodb.net/nextauth"
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}


model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  PATToken      String?
  ghAccessToken String?
  role          UserRole @default(USER)
  accounts      Account[]
  twoFactorConfirmation TwoFactorConfirmation?

}

model UserInfrastructure {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String    @map("user_id") @db.ObjectId
  provider     String
  sshKey       String
  publicIp     String
  privateIp    String
  username     String
  instanceName String
  vpc          String
  securityGroup String
  packages     String[]  @default(["update"])
  operatingSystem String
  region        String
  instanceType  String
}


model Account {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @map("user_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model PasswordResetToken {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String
  token        String    @unique
  expires      DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String
  token        String    @unique
  expires      DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String    @db.ObjectId
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model VerificationToken {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String
  token        String    @unique
  expires      DateTime

  @@unique([email, token])
}


